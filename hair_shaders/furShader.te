#version 430 core

layout (triangles, equal_spacing, ccw) in; // Input a set of triangles

in vec2 tcTexCoord[]; // Input texture coordinates for each vertex
in vec3 tcNormal[]; // Input normal vectors for each vertex
in float tcVertexID[]; // Input vertex IDs for each vertex

out vec2 teTexCoord;
out vec3 teNormal;
out vec3 teVertexIDs;
out vec3 teTessCoords;

void main(void)
{
    // Compute the position of the generated vertex based on the tessellation coordinates and input vertex positions
    gl_Position = (gl_TessCoord.x * gl_in[0].gl_Position +
                   gl_TessCoord.y * gl_in[1].gl_Position +
                   gl_TessCoord.z * gl_in[2].gl_Position);

     // Compute the texture coordinates for the generated vertex based on the tessellation coordinates and input texture coordinates
    teTexCoord = (gl_TessCoord.x * tcTexCoord[0] +
                    gl_TessCoord.y * tcTexCoord[1] +
                    gl_TessCoord.z * tcTexCoord[2]);

    // Use the normal vector of the first input vertex, since the normal should be the same over the entire triangle
    teNormal = tcNormal[0];// Normal should be the same over the entire triangle
    // Pass through the tessellation coordinates and input vertex IDs for the generated vertex
    teTessCoords = gl_TessCoord;
    teVertexIDs = vec3(tcVertexID[0], tcVertexID[1], tcVertexID[2]);
}
